#!/usr/bin/env sh

# Colors
C_INFO='\033[0;34m'
C_OK='\033[0;32m'
C_ERROR='\033[0;31m'
C_WARN='\033[0;33m'
C_CLEAR='\033[0m' # No Color

indent_output() {
  local indentSize=2
  local indent=1
  if [ -n "$1" ]; then indent=$1; fi
  pr -to $(($indent * $indentSize))
}

announce_rule() {
    str="▶ [$1] ----------------------------------------------------------------"
    echo "${C_INFO}${str:0:64}${C_CLEAR}"
}

announce_ok() {
    str="✔ [$1] ----------------------------------------------------------------"
    echo "${C_OK}${str:0:64}${C_CLEAR}\n"
}

handle_error() {
    echo "${C_ERROR}✖ [pre-commit failed] ------------------------------------------${C_CLEAR}"
    exit $1
}

handle_sigint() {
    echo "${C_WARN}⚠ [pre-commit interrupted] -------------------------------------${C_CLEAR}"
    exit 1
}

# source the husky sh file
. "$(dirname -- "$0")/_/husky.sh"
# make the pipeline exit if any command fails
set -o pipefail
# handle errors and signals
trap 'handle_error $?' ERR
trap handle_sigint SIGINT

# echo "${C_WARN}You are about to commit the following to" $(git branch --show-current)":" $(git diff --cached --name-only --diff-filter=ACM)${C_CLEAR}"\n"
 
# rules ----------------------------------------------------------------

announce_rule "validate branch name"
chmod +x ./scripts/validate_branch_name.sh
./scripts/validate_branch_name.sh | indent_output

announce_rule "format"
pnpm run format | indent_output

announce_rule "validate env vars"
pnpm validate-env-vars -t .env.template | indent_output

announce_rule "(TS) format"
cd ./dashboard
pnpm run format | indent_output
cd ..

announce_rule "(TS) lint"
cd ./dashboard
pnpm run lint | indent_output
cd ..

announce_rule "(TS) typecheck"
cd ./dashboard
pnpm run typecheck | indent_output
cd ..

announce_rule "(TS) validate env vars"
pnpm validate-env-vars -t dashboard/.env.template -e dashboard/.env | indent_output

announce_rule "(Py) isort"
cd ./api
python3 -m isort . --check-only --multi-line 3 --profile black | indent_output
cd ..
cd ./slackbot
python3 -m isort . --check-only --multi-line 3 --profile black | indent_output
cd ..

announce_rule "(Py) format"
cd ./api
python3 -m black . --target-version=py311 --check | indent_output
cd ..
cd ./slackbot
python3 -m black . --target-version=py311 --check | indent_output
cd ..

announce_rule "(Py) lint"
cd ./api
python3 -m flake8 --max-line-length 120 | indent_output
cd ..
cd ./slackbot
python3 -m flake8 --max-line-length 120 | indent_output
cd ..

# end rules ----------------------------------------------------------------

announce_ok "All checks passed"
