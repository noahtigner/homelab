#!/usr/bin/env sh

# Colors
C_INFO='\033[0;34m'
C_OK='\033[0;32m'
C_ERROR='\033[0;31m'
C_WARN='\033[0;33m'
C_CLEAR='\033[0m' # No Color

indent() {
  local indentSize=2
  local indent=1
  if [ -n "$1" ]; then indent=$1; fi
  pr -to $(($indent * $indentSize))
}

announceRule() {
    str="▶ [$1] ----------------------------------------------------------------"
    echo "${C_INFO}${str:0:64}${C_CLEAR}"
}

announceDone() {
    str="✔ [$1] ----------------------------------------------------------------"
    echo "${C_OK}${str:0:64}${C_CLEAR}\n"
}

. "$(dirname -- "$0")/_/husky.sh"

# echo "${C_WARN}You are about to commit the following to" $(git branch --show-current)":" $(git diff --cached --name-only --diff-filter=ACM)${C_CLEAR}"\n"
 
# rules ----------------------------------------------------------------

announceRule "validate branch name"
chmod +x ./scripts/validate_branch_name.sh
./scripts/validate_branch_name.sh | indent

announceRule "format"
pnpm run format | indent

announceRule "(TS) format"
cd ./dashboard
pnpm run format | indent
cd ..

announceRule "(TS) lint"
cd ./dashboard
pnpm run lint | indent
cd ..

announceRule "(TS) typecheck"
cd ./dashboard
pnpm run typecheck | indent
cd ..

announceRule "(Py) isort"
cd ./api
python3 -m isort . --check-only --multi-line 3 --profile black | indent
cd ..

announceRule "(Py) format"
cd ./api
python3 -m black . --target-version=py311 --check | indent
cd ..

announceRule "(Py) lint"
cd ./api
python3 -m flake8 --max-line-length 99 | indent
cd ..

# TODO: reconcile isort with flake8

# end rules ----------------------------------------------------------------

announceDone "All checks passed"
